from fastapi import FastAPI, Depends
from sqlalchemy.orm import Session
from fastapi.middleware.cors import CORSMiddleware
from typing import List
from pydantic import BaseModel
from database import get_db, Product, init_db
from importer import import_products_from_xml_url
import asyncio
from fastapi.responses import Response
import xml.etree.ElementTree as ET
from fastapi.responses import StreamingResponse
import io
import pandas as pd
from fastapi import Request

# –ó–º—ñ–Ω—é—î–º–æ FastAPI, —â–æ–± –≤—ñ–Ω –ø—Ä–∞—Ü—é–≤–∞–≤ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º /api
app = FastAPI(openapi_prefix="/api")

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –∞–±–æ –≤–∫–∞–∂–∏ –¥–æ–º–µ–Ω —Ñ—Ä–æ–Ω—Ç–∞
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic –º–æ–¥–µ–ª—å –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
class ProductOut(BaseModel):
    id: int
    product_code: str
    article: str
    title: str
    #barcode: Optional[str] = None
    category: str
    category_name: str
    brand: str
    stock: int
    price_uah: float
    price_usd: float  # ‚Üê –î–û–î–ê–¢–ò –¶–ï
    image: str

    class Config:
        from_attributes = True # –ó–º—ñ–Ω–µ–Ω–æ –∑ orm_mode –Ω–∞ from_attributes –¥–ª—è Pydantic V2

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—å —ñ —ñ–º–ø–æ—Ä—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
@app.on_event("startup")
async def startup_event():
    for i in range(10):
        try:
            init_db()
            await import_products_from_xml_url()
            break
        except Exception as e:
            print(f"üîÅ –°–ø—Ä–æ–±–∞ {i+1}/10: –ë–î —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞, —á–µ–∫–∞—é...")
            await asyncio.sleep(2)
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è 10 —Å–ø—Ä–æ–±.")

@app.get("/products", response_model=List[ProductOut])
def get_products(db: Session = Depends(get_db)):
    return db.query(Product).all()

@app.post("/import-xml")
async def import_xml():
    return await import_products_from_xml_url()

@app.post("/export/xlsx")
async def export_selected_products_xlsx(request: Request, db: Session = Depends(get_db)):
    ids = await request.json()
    products = db.query(Product).filter(Product.id.in_(ids)).all()

    data = [p.__dict__ for p in products]
    for d in data:
        d.pop('_sa_instance_state', None)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤
    columns_order = [
        ("product_code", "ID"),
        ("title", "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É"),
        ("category_name", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"),
        ("brand", "–ë—Ä–µ–Ω–¥"),
        ("article", "–ê—Ä—Ç–∏–∫—É–ª"),
        ("price_uah", "–¶—ñ–Ω–∞, –≥—Ä–Ω"),
        ("price_usd", "–¶—ñ–Ω–∞, USD"),
        ("stock", "–ó–∞–ª–∏—à–æ–∫"),
        ("image", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"),
    ]

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è DataFrame –∑ –Ω–æ–≤–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫ —ñ –ø–æ—Ä—è–¥–∫–æ–º
    df = pd.DataFrame([
        {excel_name: item[db_name] for db_name, excel_name in columns_order}
        for item in data
    ])

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False)
    output.seek(0)

    return StreamingResponse(
        output,
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        headers={"Content-Disposition": "attachment; filename=selected_products.xlsx"}
    )

@app.post("/export/xml")
async def export_selected_products_xml(request: Request, db: Session = Depends(get_db)):
    ids = await request.json()
    products = db.query(Product).filter(Product.id.in_(ids)).all()

    root = ET.Element("products")
    for p in products:
        item = ET.SubElement(root, "product")
        for key in [
            "product_code", "article", "title", "category", "category_name",
            "brand", "stock", "price_uah", "price_usd", "image"
        ]:
            ET.SubElement(item, key).text = str(getattr(p, key) or "")

    xml_data = ET.tostring(root, encoding="utf-8", xml_declaration=True)

    return Response(
        content=xml_data,
        media_type="application/xml",
        headers={"Content-Disposition": "attachment; filename=selected_products.xml"}
    )

@app.get("/export/xlsx")
def export_all_products_xlsx(db: Session = Depends(get_db)):
    products = db.query(Product).all()
    data = [p.__dict__ for p in products]
    for d in data:
        d.pop('_sa_instance_state', None)

    columns_order = [
        ("product_code", "ID"),
        ("title", "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É"),
        ("category_name", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"),
        ("brand", "–ë—Ä–µ–Ω–¥"),
        ("article", "–ê—Ä—Ç–∏–∫—É–ª"),
        ("price_uah", "–¶—ñ–Ω–∞, –≥—Ä–Ω"),
        ("price_usd", "–¶—ñ–Ω–∞, USD"),
        ("stock", "–ó–∞–ª–∏—à–æ–∫"),
        ("image", "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"),
    ]

    df = pd.DataFrame([
        {excel_name: item[db_name] for db_name, excel_name in columns_order}
        for item in data
    ])

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False)
    output.seek(0)

    return StreamingResponse(
        output,
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        headers={"Content-Disposition": "attachment; filename=all_products.xlsx"}
    )